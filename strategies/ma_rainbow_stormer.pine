// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © AugustoErni

//@version=5
strategy('Moving Average Rainbow (Stormer)', overlay=true, process_orders_on_close=true, calc_on_every_tick=false, calc_on_order_fills=false, initial_capital=10000, currency=currency.USD, default_qty_type=strategy.percent_of_equity, default_qty_value=10, pyramiding=0, commission_type=strategy.commission.percent, commission_value=0.12)

maType       = input.string('EMA', title='Moving Average Type/Tipo de Média Móvel', options=['EMA', 'SMA', 'RMA', 'WMA'], tooltip='This option is to select the type of Moving Average that the Rainbow will use./Esta opção é para selecionar o tipo de Média Móvel que o Rainbow utilizará.')
targetFactor = input.float(1.6, title='Target Take Profit/Objetivo de Lucro Alvo', minval=0.1, step=0.1, tooltip='Calculate the take profit factor when entry position./Calcula o fator do alvo lucro ao entrar na posição.')

isOneTwoThreeTop    = high[1] > high[2] and high[1] > high ? 1 : 0
isOneTwoThreeBottom = low[1] < low[2] and low[1] < low ? 1 : 0

var curTopPrice     = 0.0
var prevTopPrice    = 0.0
var curBottomPrice  = 0.0
var prevBottomPrice = 0.0
if (isOneTwoThreeTop)
    curTopPrice := high[2]
    if (curTopPrice > prevTopPrice)
        prevTopPrice := curTopPrice
if (isOneTwoThreeBottom)
    curBottomPrice := low[2]
    if (curBottomPrice < prevBottomPrice or prevBottomPrice == 0.0)
        prevBottomPrice := curBottomPrice

mas(maType) =>
    if (maType == 'SMA')
        [ta.sma(close, 3), ta.sma(close, 5), ta.sma(close, 8), ta.sma(close, 13), ta.sma(close, 20), ta.sma(close, 25), ta.sma(close, 30), ta.sma(close, 35), ta.sma(close, 40), ta.sma(close, 45), ta.sma(close, 50), ta.sma(close, 55)]
    else if (maType == 'RMA')
        [ta.rma(close, 3), ta.rma(close, 5), ta.rma(close, 8), ta.rma(close, 13), ta.rma(close, 20), ta.rma(close, 25), ta.rma(close, 30), ta.rma(close, 35), ta.rma(close, 40), ta.rma(close, 45), ta.rma(close, 50), ta.rma(close, 55)]
    else if (maType == 'WMA')
        [ta.wma(close, 3), ta.wma(close, 5), ta.wma(close, 8), ta.wma(close, 13), ta.wma(close, 20), ta.wma(close, 25), ta.wma(close, 30), ta.wma(close, 35), ta.wma(close, 40), ta.wma(close, 45), ta.wma(close, 50), ta.wma(close, 55)]
    else
        [ta.ema(close, 3), ta.ema(close, 5), ta.ema(close, 8), ta.ema(close, 13), ta.ema(close, 20), ta.ema(close, 25), ta.ema(close, 30), ta.ema(close, 35), ta.ema(close, 40), ta.ema(close, 45), ta.ema(close, 50), ta.ema(close, 55)]

[ma1, ma2, ma3, ma4, ma5, ma6, ma7, ma8, ma9, ma10, ma11, ma12] = mas(maType)

maTouchPriceUptrend(ma1, ma2, ma3, ma4, ma5, ma6, ma7, ma8, isMaUptrend) =>
    var touchPrice = 0.0
    if (isMaUptrend)
        if (low <= ma1 and low >= ma2)
            touchPrice := ma2
        else if (low <= ma2 and low >= ma3)
            touchPrice := ma3
        else if (low <= ma3 and low >= ma4)
            touchPrice := ma4
        else if (low <= ma4 and low >= ma5)
            touchPrice := ma5
        else if (low <= ma5 and low >= ma6)
            touchPrice := ma6
        else if (low <= ma6 and low >= ma7)
            touchPrice := ma7
        else if (low <= ma7 and low >= ma8)
            touchPrice := ma8
        else if (low <= ma8 and low >= ma9)
            touchPrice := ma9
        else if (low <= ma9 and low >= ma10)
            touchPrice := ma10
        else if (low <= ma10 and low >= ma11)
            touchPrice := ma11
        else if (low <= ma11 and low >= ma12)
            touchPrice := ma12
        else
            touchPrice := 0.0

maTouchPriceDowntrend(ma1, ma2, ma3, ma4, ma5, ma6, ma7, ma8, isMaDowntrend) =>
    var touchPrice = 0.0
    if (isMaDowntrend)
        if (high >= ma1 and high <= ma2)
            touchPrice := ma2
        else if (high >= ma2 and high <= ma3)
            touchPrice := ma3
        else if (high >= ma3 and high <= ma4)
            touchPrice := ma4
        else if (high >= ma4 and high <= ma5)
            touchPrice := ma5
        else if (high >= ma5 and high <= ma6)
            touchPrice := ma6
        else if (high >= ma6 and high <= ma7)
            touchPrice := ma7
        else if (high >= ma7 and high <= ma8)
            touchPrice := ma8
        else if (high >= ma8 and high <= ma9)
            touchPrice := ma9
        else if (high >= ma9 and high <= ma10)
            touchPrice := ma10
        else if (high >= ma10 and high <= ma11)
            touchPrice := ma11
        else if (high >= ma11 and high <= ma12)
            touchPrice := ma12
        else
            touchPrice := 0.0

maMean        = ((ma1 + ma2 + ma3 + ma4 + ma5 + ma6 + ma7 + ma8 + ma9 + ma10 + ma11 + ma12) / 12)
isMaUptrend   = close > maMean and ma5 > ma6 and ma6 > ma7 and ma7 > ma8
isMaDowntrend = close < maMean and ma5 < ma6 and ma6 < ma7 and ma7 < ma8

curTouchPriceUptrend    = maTouchPriceUptrend(ma1, ma2, ma3, ma4, ma5, ma6, ma7, ma8, isMaUptrend)
prevTouchPriceUptrend   = maTouchPriceUptrend(ma1, ma2, ma3, ma4, ma5, ma6, ma7, ma8, isMaUptrend)[1]
curTouchPriceDowntrend  = maTouchPriceDowntrend(ma1, ma2, ma3, ma4, ma5, ma6, ma7, ma8, isMaDowntrend)
prevTouchPriceDowntrend = maTouchPriceDowntrend(ma1, ma2, ma3, ma4, ma5, ma6, ma7, ma8, isMaDowntrend)[1]

isCurHighGreaterPrevHigh = high > high[1] ? 1 : 0
isCurLowLesserPrevLow    = low < low[1] ? 1 : 0

isPrevTouchPriceUptrendTouched   = prevTouchPriceUptrend > 0.0 ? 1 : 0
isPrevTouchPriceDowntrendTouched = prevTouchPriceDowntrend > 0.0 ? 1 : 0

isPrevTouchedPriceUptrend   = isPrevTouchPriceUptrendTouched and isMaUptrend ? 1 : 0
isPrevTouchedPriceDowntrend = isPrevTouchPriceDowntrendTouched and isMaDowntrend ? 1 : 0

isPositionNone  = na(strategy.position_avg_price) ? 1 : 0
isPositionLong  = strategy.position_size > 0 ? 1 : 0
isPositionShort = strategy.position_size < 0 ? 1 : 0

isLongCondition  = isMaUptrend and isCurHighGreaterPrevHigh and isPrevTouchedPriceUptrend ? 1 : 0
isShortCondition = isMaDowntrend and isCurLowLesserPrevLow and isPrevTouchedPriceDowntrend ? 1 : 0

var float shortPositionLowestLow = na
var float stopLossShort = na

if (isLongCondition and isPositionNone)
    shortPositionLowestLow := na
    stopLossLong = prevTouchPriceUptrend
    if (isCurLowLesserPrevLow)
        curLowToucedPrice = curTouchPriceUptrend
        if (curLowToucedPrice == 0.0)
            curLowToucedPrice := low
        stopLossLong := ((stopLossLong + curLowToucedPrice) / 2)
    targetLong   = (close + (math.abs(close - stopLossLong) * targetFactor))
    alertMessage = '{ "side/lado": "buy", "entry/entrada": ' + str.tostring(close) + ', "stop": ' + str.tostring(stopLossLong) + ', "target/alvo": ' + str.tostring(targetLong) + ' }'
    alert(alertMessage)
    strategy.entry('Long', strategy.long)
    strategy.exit('Exit Long', 'Long', stop=stopLossLong, limit=targetLong)
if (isShortCondition and isPositionNone)
    shortPositionLowestLow := na
    stopLossShort := prevTouchPriceDowntrend
    if (isCurHighGreaterPrevHigh)
        curHighToucedPrice = curTouchPriceDowntrend
        if (curHighToucedPrice == 0.0)
            curHighToucedPrice := high
        stopLossShort := ((stopLossShort + curHighToucedPrice) / 2)
    targetShort   = (close - (math.abs(close - stopLossShort) * targetFactor))
    alertMessage  = '{ "side/lado": "sell", "entry/entrada": ' + str.tostring(close) + ', "stop": ' + str.tostring(stopLossShort) + ', "target/alvo": ' + str.tostring(targetShort) + ' }'
    alert(alertMessage)
    strategy.entry('Short', strategy.short)
    strategy.exit('Exit Short', 'Short', stop=stopLossShort, limit=targetShort)

if (isPositionShort) 
    curLowestLow = low
    if (curLowestLow < shortPositionLowestLow or na(shortPositionLowestLow))
        shortPositionLowestLow := curLowestLow
    if (ma1 > ma2 and ma2 > ma3 and ma3 > ma4 and shortPositionLowestLow < strategy.position_avg_price)
        strategy.exit('Exit Short', 'Short', stop=stopLossShort, limit=shortPositionLowestLow)


// plot(isLongCondition, title='isLongCondition')
// plot(prevTouchPriceUptrend, title='prevTouchPriceUptrend')
// plot(isMaUptrend, title='isMaUptrend')
// plot(isMaDowntrend, title='isMaDowntrend')
// plot(strategy.position_size, title='strategy.position_size')
// plot(maMean, title='MA Mean')
// plot(prevTouchPriceDowntrend, title='prevTouchPriceDowntrend')
plot(strategy.position_avg_price, title='strategy.position_avg_price')
plot(isPositionShort, title='isPositionShort')
plot(shortPositionLowestLow, title='shortPositionLowestLow')
plot(ma1, title='1st Moving Average', color=color.rgb(240, 240, 240))
plot(ma2, title='2nd Moving Average', color=color.rgb(220, 220, 220))
plot(ma3, title='3rd Moving Average', color=color.rgb(200, 200, 200))
plot(ma4, title='4th Moving Average', color=color.rgb(180, 180, 180))
plot(ma5, title='5th Moving Average', color=color.rgb(160, 160, 160))
plot(ma6, title='6th Moving Average', color=color.rgb(140, 140, 140))
plot(ma7, title='7th Moving Average', color=color.rgb(120, 120, 120))
plot(ma8, title='8th Moving Average', color=color.rgb(100, 120, 120))
plot(ma9, title='9th Moving Average', color=color.rgb(80, 120, 120))
plot(ma10, title='10th Moving Average', color=color.rgb(60, 120, 120))
plot(ma11, title='11th Moving Average', color=color.rgb(40, 120, 120))
plot(ma12, title='12th Moving Average', color=color.rgb(20, 120, 120))

// plot(isOneTwoThreeTop, title='isOneTwoThreeTop')
// plot(curTopPrice, title='curTopPrice')
// plot(prevTopPrice, title='prevTopPrice')

// plot(isOneTwoThreeBottom, title='isOneTwoThreeBottom')
// plot(curBottomPrice, title='curBottomPrice')
// plot(prevBottomPrice, title='prevBottomPrice')

tablePosition    = position.bottom_right
tableColumns     = 2
tableRows        = 2
tableFrameWidth  = 1
tableBorderColor = color.gray
tableBorderWidth = 1

tableInfoTrade = table.new(position=tablePosition, columns=tableColumns, rows=tableRows, frame_width=tableFrameWidth, border_color=tableBorderColor, border_width=tableBorderWidth)

table.cell(table_id=tableInfoTrade, column=0, row=0)
table.cell(table_id=tableInfoTrade, column=1, row=0)

table.cell(table_id=tableInfoTrade, column=0, row=0, text='MA Mean', text_color=color.white)
table.cell(table_id=tableInfoTrade, column=0, row=1, text=str.tostring(maMean), text_color=color.yellow)

table.cell(table_id=tableInfoTrade, column=1, row=0, text='Position Average Price', text_color=color.white)
table.cell(table_id=tableInfoTrade, column=1, row=1, text=str.tostring(strategy.position_avg_price), text_color=color.yellow)